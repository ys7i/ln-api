package daocore

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// UserSession represents a row from 'db.user_sessions'.
type UserSession struct {
	ID         string    `json:"id"`          // id
	UserID     int       `json:"user_id"`     // user_id
	ExpireDate time.Time `json:"expire_date"` // expire_date
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the UserSession exists in the database.
func (us *UserSession) Exists() bool {
	return us._exists
}

// Deleted returns true when the UserSession has been marked for deletion from
// the database.
func (us *UserSession) Deleted() bool {
	return us._deleted
}

// Insert inserts the UserSession to the database.
func (us *UserSession) Insert(ctx context.Context, db DB) error {
	switch {
	case us._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case us._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO db.user_sessions (` +
		`id, user_id, expire_date` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, us.ID, us.UserID, us.ExpireDate)
	if _, err := db.ExecContext(ctx, sqlstr, us.ID, us.UserID, us.ExpireDate); err != nil {
		return logerror(err)
	}
	// set exists
	us._exists = true
	return nil
}

// Update updates a UserSession in the database.
func (us *UserSession) Update(ctx context.Context, db DB) error {
	switch {
	case !us._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case us._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE db.user_sessions SET ` +
		`user_id = ?, expire_date = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, us.UserID, us.ExpireDate, us.ID)
	if _, err := db.ExecContext(ctx, sqlstr, us.UserID, us.ExpireDate, us.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the UserSession to the database.
func (us *UserSession) Save(ctx context.Context, db DB) error {
	if us.Exists() {
		return us.Update(ctx, db)
	}
	return us.Insert(ctx, db)
}

// Upsert performs an upsert for UserSession.
func (us *UserSession) Upsert(ctx context.Context, db DB) error {
	switch {
	case us._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO db.user_sessions (` +
		`id, user_id, expire_date` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id = VALUES(id), user_id = VALUES(user_id), expire_date = VALUES(expire_date)`
	// run
	logf(sqlstr, us.ID, us.UserID, us.ExpireDate)
	if _, err := db.ExecContext(ctx, sqlstr, us.ID, us.UserID, us.ExpireDate); err != nil {
		return logerror(err)
	}
	// set exists
	us._exists = true
	return nil
}

// Delete deletes the UserSession from the database.
func (us *UserSession) Delete(ctx context.Context, db DB) error {
	switch {
	case !us._exists: // doesn't exist
		return nil
	case us._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM db.user_sessions ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, us.ID)
	if _, err := db.ExecContext(ctx, sqlstr, us.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	us._deleted = true
	return nil
}

// UserSessionByUserID retrieves a row from 'db.user_sessions' as a UserSession.
//
// Generated from index 'user_id'.
func UserSessionByUserID(ctx context.Context, db DB, userID int) (*UserSession, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, expire_date ` +
		`FROM db.user_sessions ` +
		`WHERE user_id = ?`
	// run
	logf(sqlstr, userID)
	us := UserSession{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID).Scan(&us.ID, &us.UserID, &us.ExpireDate); err != nil {
		return nil, logerror(err)
	}
	return &us, nil
}

// UserSessionByID retrieves a row from 'db.user_sessions' as a UserSession.
//
// Generated from index 'user_sessions_id_pkey'.
func UserSessionByID(ctx context.Context, db DB, id string) (*UserSession, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, expire_date ` +
		`FROM db.user_sessions ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	us := UserSession{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&us.ID, &us.UserID, &us.ExpireDate); err != nil {
		return nil, logerror(err)
	}
	return &us, nil
}

// User returns the User associated with the UserSession's (UserID).
//
// Generated from foreign key 'user_sessions_ibfk_1'.
func (us *UserSession) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, us.UserID)
}
