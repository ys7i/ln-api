package daocore

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Nutorition represents a row from 'db.nutoritions'.
type Nutorition struct {
	ID       int            `json:"id"`        // id
	Effect   sql.NullString `json:"effect"`    // effect
	ImageURL sql.NullString `json:"image_url"` // image_url
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Nutorition exists in the database.
func (n *Nutorition) Exists() bool {
	return n._exists
}

// Deleted returns true when the Nutorition has been marked for deletion from
// the database.
func (n *Nutorition) Deleted() bool {
	return n._deleted
}

// Insert inserts the Nutorition to the database.
func (n *Nutorition) Insert(ctx context.Context, db DB) error {
	switch {
	case n._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case n._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO db.nutoritions (` +
		`effect, image_url` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, n.Effect, n.ImageURL)
	res, err := db.ExecContext(ctx, sqlstr, n.Effect, n.ImageURL)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	n.ID = int(id)
	// set exists
	n._exists = true
	return nil
}

// Update updates a Nutorition in the database.
func (n *Nutorition) Update(ctx context.Context, db DB) error {
	switch {
	case !n._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case n._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE db.nutoritions SET ` +
		`effect = ?, image_url = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, n.Effect, n.ImageURL, n.ID)
	if _, err := db.ExecContext(ctx, sqlstr, n.Effect, n.ImageURL, n.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Nutorition to the database.
func (n *Nutorition) Save(ctx context.Context, db DB) error {
	if n.Exists() {
		return n.Update(ctx, db)
	}
	return n.Insert(ctx, db)
}

// Upsert performs an upsert for Nutorition.
func (n *Nutorition) Upsert(ctx context.Context, db DB) error {
	switch {
	case n._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO db.nutoritions (` +
		`id, effect, image_url` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`effect = VALUES(effect), image_url = VALUES(image_url)`
	// run
	logf(sqlstr, n.ID, n.Effect, n.ImageURL)
	if _, err := db.ExecContext(ctx, sqlstr, n.ID, n.Effect, n.ImageURL); err != nil {
		return logerror(err)
	}
	// set exists
	n._exists = true
	return nil
}

// Delete deletes the Nutorition from the database.
func (n *Nutorition) Delete(ctx context.Context, db DB) error {
	switch {
	case !n._exists: // doesn't exist
		return nil
	case n._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM db.nutoritions ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, n.ID)
	if _, err := db.ExecContext(ctx, sqlstr, n.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	n._deleted = true
	return nil
}

// NutoritionByID retrieves a row from 'db.nutoritions' as a Nutorition.
//
// Generated from index 'nutoritions_id_pkey'.
func NutoritionByID(ctx context.Context, db DB, id int) (*Nutorition, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, effect, image_url ` +
		`FROM db.nutoritions ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	n := Nutorition{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&n.ID, &n.Effect, &n.ImageURL); err != nil {
		return nil, logerror(err)
	}
	return &n, nil
}
